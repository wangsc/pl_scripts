#!/usr/bin/perl -w
use strict;
use Bio::DB::Fasta;

my $sUsage = <<END;
Usage:
perl $0
<ortholog gene pairs list file, 3B_S293	3A_S1531>
<3B contig/BAC sequences in fasta>
<3B annotation file generated by PASA, gff3 format>
<3A contig/scafold sequence in fasta>
<3B annotation file generated by PASA, gff3 format>
END

die $sUsage unless @ARGV >= 5;

my ($ortho_file, $B_ctg_file, $B_gff, $A_ctg_file, $A_gff) = @ARGV;

my @ortho_A_B = read_ortho_file($ortho_file);
my $gn_3A = Bio::DB::Fasta->new($A_ctg_file);
my $gn_3B = Bio::DB::Fasta->new($B_ctg_file);

my ($B_genomic_pos, $B_gene_struc, $B_gene_ctg) = read_gff($B_gff);
my ($A_genomic_pos, $A_gene_struc, $A_gene_ctg) = read_gff($A_gff);

foreach (@ortho_A_B)
{
	chomp;
	my @out=split /\s+/,$_;
	my $out_file = join("-", @out) . ".fasta";
	open (OUT, ">$out_file") or die;
	my ($b_gene, $a_gene) = $_=~/3B_(\S+)\s+3A_(\S+)/;
	my $b_gene_seq = get_seq($gn_3B, $b_gene, $B_genomic_pos, $B_gene_struc, $B_gene_ctg);
	my $a_gene_seq = get_seq($gn_3A, $a_gene, $A_genomic_pos, $A_gene_struc, $A_gene_ctg);
	
	print OUT ">3A_$a_gene\n", $a_gene_seq, "\n";
	print OUT ">3B_$b_gene\n", $b_gene_seq, "\n";
	
	close OUT;
}


# Subroutines
sub get_seq
{
	my ($gn, $gene, $genomic_pos, $gene_struc, $gene_ctg) = @_;
	my $seq = $gn->seq($gene_ctg->{$gene}, $genomic_pos->{$gene}[0] => $genomic_pos->{$gene}[1]);
	$seq = lc ($seq);
	foreach (@{$gene_struc->{$gene}})
	{
		my ($start, $end) = split /_/, $_;
		my $subseq = substr ($seq, $start-1, ($end-$start+1));
		substr ($seq, $start-1, ($end-$start+1)) = uc($subseq);
	}
	return $seq;
}


sub read_ortho_file
{
	my $file = shift;
	open (IN, $file) or die;
	
	my @return;
	while (<IN>)
	{
		# 3B_S293	3A_S1531
		# 3B_S206	3A_S2560
		# 3B_S356	3A_S5665		
		chomp; next if /^\s+$/;

		push @return, $_;
	}
	close IN;
	return @return;
}


sub read_gff
{
	my $file = shift;
	open (IN, $file) or die "Error opening file $file\n";
	my (%genomic_pos, %gene_structure, %gene_ctg);
	my %recorder;
	while(<IN>)
	{
		chomp; 
		next unless /\S/;
		# gi|300681572|emb|FN645450.1|	PASA	cDNA_match	16861	17032	.	+	.	ID=S319-asmbl_397; Target=asmbl_397 1 172 +
		# gi|300681572|emb|FN645450.1|	PASA	cDNA_match	17453	17519	.	+	.	ID=S319-asmbl_397; Target=asmbl_397 173 239 +
		# gi|300681572|emb|FN645450.1|	PASA	cDNA_match	17597	17670	.	+	.	ID=S319-asmbl_397; Target=asmbl_397 240 313 +
		my $gene_id = $1 if /ID=(\S+?)\-/;
		my @t = split /\s+/, $_;
		$gene_ctg{$gene_id} = $t[0];
		push @{$recorder{$gene_id}}, join("_", @t[3, 4]); 
	}
	close IN;
	
	foreach my $id (keys %recorder)
	{
		my ($start, $end);
		my @exons = @{$recorder{$id}};
		my @tmp;
		foreach (@exons){push @tmp, (split/_/,$_)}
		@tmp = sort {$a<=>$b} @tmp;
		($start, $end) = @tmp[0, -1];
		$genomic_pos{$id} = [$start, $end];
		
		my @new_exons;
		foreach (@exons)
		{
			my @t = split /_/,$_; 
			@t=map{$_-$start+1}@t;
			push @new_exons, join('_', sort{$a<=>$b}@t);
		}
		$gene_structure{$id} = [unique(@new_exons)]
	}
	
	return(\%genomic_pos, \%gene_structure, \%gene_ctg)
}

sub unique
{
	my %hash = map {$_, 1} @_;
	return keys %hash;
}

