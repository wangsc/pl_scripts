#!/usr/bin/perl -w
use strict;

# parse the blat output generated by command like "blast db query -fastMap -out=blast8"
# output the genotype for each accession.

my $sUsage = "perl $0 
<BLAT output file>
<all9lines_in.sanger.fasta>
<PrivKSU_WheatCons_9k_11497518_A.csv>\n";
die $sUsage unless @ARGV >= 3;
my($blat_file, $contig_file, $csv_file) = @ARGV;

my %csv_hash = read_csv_file($csv_file);
my %ctg_hash = read_contig_file($contig_file);
my %blat_results = parse_blat_out($blat_file, \%csv_hash, \%ctg_hash);

print 'Total number of mapped oligos',"\t", scalar keys %blat_results,"\n\n";
my %acc_count;
map{$acc_count{scalar keys %{$blat_results{$_}}}++;} keys %blat_results;
grep{print $_,"\t", $acc_count{$_},"\n"} sort{$a<=>$b} keys %acc_count;

print join("\t", qw(ID accessions SNP genotypes_A/T/G/C) ),"\n";
foreach my $id (keys %blat_results)
{
	my $num_accs = scalar keys %{$blat_results{$id}};
	my $snp = join('/', @{$csv_hash{$id}});
	print join("\t", ($id, $num_accs, $snp));
	foreach my $acc (keys %{$blat_results{$id}})
	{
		my @out;
		foreach (qw(A T G C) )
		{
			push @out, exists $blat_results{$id}{$acc}{$_}?$blat_results{$id}{$acc}{$_}:0;
		}
		print "\t", $acc, '_', join('/', @out);
	}
	print "\n";
}


# Subroutines
sub parse_blat_out
{
	my ($file, $csv_ref, $ctg_ref) = @_;
	my %return_hash;
	open (IN, "$file") or die "can't open file\n";
	my $debug = 1;
	while (<IN>)
	{
		next if /^\s+$/;
		chomp;
		my @line_data = split /\t/, $_;
		my ($snp_id, $subject, $oligo_length, $query_start, $query_end, $subject_start, $subject_end) = @line_data[0, 1, 3, 6..9];
		my $acc_id = $1 if $subject =~ /(.*)_a\d+/;
		print STDERR  'subject: ', $subject,"\n" if $debug;
		$subject =~ s/^(.*?)\;.*/$1/;
		print STDERR '$subject: ',$subject,"\n" if $debug; $debug = 0;
		if (not exists $ctg_ref->{$subject}){print STDERR 'NOt exist id: ', $subject,"\n"; exit 1;}
		#$return_hash{$snp_id}{$acc_id}	= [$subject, $query_start, $query_end, $subject_start, $subject_end];
		my $genotype = determin_genotype($ctg_ref, $csv_ref, $subject, $subject_start, $subject_end);
		$return_hash{$snp_id}{$acc_id}{$genotype}++;
	}
	close IN;
	return %return_hash;
}

sub determin_genotype
{
	my ($ctg_hashref, $csv_hashref, $id, $start, $end) = @_;
	#print STDERR '$ctg_hashref->{$id}: ', $ctg_hashref->{$id},"\n";
	my $genotype = $start>$end?complemantary(substr($ctg_hashref->{$id}, $end-2, 1)):substr($ctg_hashref->{$id}, $end, 1);
	$genotype = uc $genotype;
	return $genotype;
#	my %type_hash = map{uc $_, 1}@{$csv_hashref->{$id}};
#	if (exists $type_hash{$genotype})
#	{
#		return $genotype;
#	}
#	else
#	{
#		return complemantary($genotype);		
#	}
}


sub complemantary
{
	my $base = shift;
	$base =~ tr/[atgcATGC]/[tacgTACG]/;
	return $base;
}


sub read_csv_file
{
	my $file = shift;
	my %return_hash;
	open (IN, "$file") or die "can't open file\n";
	while (<IN>)
	{
		next if /^\s+$/;
		next unless /^wsnp/;
		my @line_data = split /,/, $_;
		my ($snp_id, $genotype) = @line_data[1, 3];
		my @types;
		while ($genotype =~ /([ATGC])/ig)
		{
			push @types, $1;
		}
		$return_hash{$snp_id} = [@types];	
	}
	close IN;
	return %return_hash;
}



sub read_contig_file
{
	my $file = shift;
	my %return_hash;
	open (IN, "$file") or die "can't open file\n";
	my $id;
	my $debug = 0;
	while (<IN>)
	{
		next if /^\s+$/;
		chomp;
		if (/s_2_a1848729/){print STDERR $_,"\n"; $debug=1}
		if (/^>/)
		{
			$id = $_;
			$id =~ s/^>//;
			$id =~ s/^(.*?)\;.*/$1/;
			print STDERR '$id ', $id,"\n" if $debug == 1; $debug = 0;
			$return_hash{$id} = '';
			next;
		}
		else
		{
			$return_hash{$id} .= $_;
		}
	}
	close IN;
	return %return_hash; 
}



